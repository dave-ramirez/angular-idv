/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BlinkIdDocScanConfig } from "./components/blinkid-docscan/blinkid-docscan.model";
import { BlinkIdDocScanCameraConfig } from "./components/blinkid-docscan-camera/blinkid-docscan-camera.model";
import { BlinkIdDocScanImageConfig } from "./components/blinkid-docscan-image/blinkid-docscan-image.model";
import { BlinkIdDocScanResultLayerConfig } from "./components/blinkid-docscan-result-layer/blinkid-docscan-result-layer.model";
import { BlinkIdCombinedRecognizerResult } from "@microblink/blinkid-in-browser-sdk";
import { ButtonCloseTopRightCallbacks } from "./components/button-close-top-right/button-close-top-right.model";
import { ButtonIcon, ButtonIconRoundCallbacks } from "./components/button-icon-round/button-icon-round.model";
import { EditableStringAttributeConfig } from "./components/blinkid-docscan-result-layer/editable-string-attribute.model";
import { FaceLivenessConfig } from "./components/facetec-liveness/facetec-liveness.model";
import { FaceTecConnectorResult } from "./utils/faceTecConnector";
import { IDVStepName, StepComponentConfig } from "./shared";
import { FlowManagerComponentCallbacks } from "./components/flow-manager/flow-manager.model";
import { FmptCheckpoint } from "./components/flow-manager/flow-manager-progress-tracker.model";
import { IconFailCircleSize } from "./components/icon-fail-circle/icon-fail-circle.model";
import { IdvInBrowserConfig, IdvInBrowserResult } from "./components/idv-in-browser/idv-in-browser.model";
export namespace Components {
    interface BlinkidDocscan {
        "config": BlinkIdDocScanConfig;
        "hasLobby": boolean;
        "reset": () => Promise<void>;
        "reviewScan": () => Promise<void>;
        "startScan": (skipLobby?: boolean) => Promise<void>;
    }
    interface BlinkidDocscanCamera {
        "config": BlinkIdDocScanCameraConfig;
        "startScan": () => Promise<void>;
    }
    interface BlinkidDocscanImage {
        "config": BlinkIdDocScanImageConfig;
        "startScan": () => Promise<void>;
    }
    interface BlinkidDocscanResultLayer {
        "config"?: BlinkIdDocScanResultLayerConfig;
        "open": (originalData: BlinkIdCombinedRecognizerResult) => Promise<void>;
    }
    interface ButtonCloseTopRight {
        "callbacks": ButtonCloseTopRightCallbacks;
        "isDisabled": boolean;
        "size": string;
    }
    interface ButtonIconRound {
        "callbacks"?: ButtonIconRoundCallbacks;
        "icon": ButtonIcon;
        "isDisabled": boolean;
        "marginBottom": string;
        "marginLeft": string;
        "marginRight": string;
        "marginTop": string;
        "size": number;
    }
    interface EditableStringAttribute {
        "config": EditableStringAttributeConfig;
        "value": string;
    }
    interface FacetecLiveness {
        "config": FaceLivenessConfig;
        "enroll": (skipLobby?: boolean) => Promise<void>;
        "hasLobby": boolean;
        "reset": () => Promise<void>;
    }
    interface FacetecLivenessRetryLayer {
        "errorCode": FaceTecConnectorResult;
        "show": boolean;
    }
    interface FlowManager {
        "callbacks": FlowManagerComponentCallbacks;
        "reset": () => Promise<void>;
        "start": () => Promise<void>;
        "steps": IDVStepName[];
    }
    interface FlowManagerProgressTracker {
        "checkpoints": FmptCheckpoint[];
        "show": boolean;
    }
    interface IconFailCircle {
        "size": IconFailCircleSize;
    }
    interface IconLoader {
        "fontSize"?: string;
    }
    interface IdvInBrowser {
        "config"?: IdvInBrowserConfig;
        "restart": () => Promise<void>;
    }
    interface ProcessingLayer {
        "iconFontSize": string;
        "text": string;
    }
    interface StepDocscan {
        /**
          * Prop()  Mandatory configuration object.
         */
        "config": StepComponentConfig;
        /**
          * Method()  Checks if step's process finished successfully and a corresponding result data is saved.
         */
        "didSucceed": () => Promise<boolean>;
        /**
          * Method()  Extracts step's sucess result data.
         */
        "getSuccessData": () => Promise<any>;
        /**
          * Method()  Resets step's state.
         */
        "reset": () => Promise<void>;
        /**
          * Method()  Resets step's state and starts default process again.
         */
        "restart": (skipLobby?: boolean) => Promise<void>;
        /**
          * Method()  Starts step's process. Step is stateful:  A. If it's the first time it is being run then default process is being executed.  B. If it has been run before and it succeeded then step is started in a so-called review mode.
         */
        "start": (skipLobby?: boolean) => Promise<void>;
    }
    interface StepLiveness {
        /**
          * Prop()  Mandatory configuration object.
         */
        "config": StepComponentConfig;
        /**
          * Method()  Checks if step's process finished successfully and a corresponding result data is saved.
         */
        "didSucceed": () => Promise<boolean>;
        /**
          * Method()  Extracts step's sucess result data.
         */
        "getSuccessData": () => Promise<any>;
        /**
          * Method()  Resets step's state.
         */
        "reset": () => Promise<void>;
        /**
          * Method()  Resets step's state and starts default process again.
         */
        "restart": (skipLobby?: boolean) => Promise<void>;
        /**
          * Method()  Starts step's process. Step is stateful:  A. If it's the first time it is being run then default process is being executed.  B. If it has been run before and it succeeded then step is started in a so-called review mode.
         */
        "start": (skipLobby?: boolean) => Promise<void>;
    }
}
export interface FacetecLivenessRetryLayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFacetecLivenessRetryLayerElement;
}
export interface IdvInBrowserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIdvInBrowserElement;
}
declare global {
    interface HTMLBlinkidDocscanElement extends Components.BlinkidDocscan, HTMLStencilElement {
    }
    var HTMLBlinkidDocscanElement: {
        prototype: HTMLBlinkidDocscanElement;
        new (): HTMLBlinkidDocscanElement;
    };
    interface HTMLBlinkidDocscanCameraElement extends Components.BlinkidDocscanCamera, HTMLStencilElement {
    }
    var HTMLBlinkidDocscanCameraElement: {
        prototype: HTMLBlinkidDocscanCameraElement;
        new (): HTMLBlinkidDocscanCameraElement;
    };
    interface HTMLBlinkidDocscanImageElement extends Components.BlinkidDocscanImage, HTMLStencilElement {
    }
    var HTMLBlinkidDocscanImageElement: {
        prototype: HTMLBlinkidDocscanImageElement;
        new (): HTMLBlinkidDocscanImageElement;
    };
    interface HTMLBlinkidDocscanResultLayerElement extends Components.BlinkidDocscanResultLayer, HTMLStencilElement {
    }
    var HTMLBlinkidDocscanResultLayerElement: {
        prototype: HTMLBlinkidDocscanResultLayerElement;
        new (): HTMLBlinkidDocscanResultLayerElement;
    };
    interface HTMLButtonCloseTopRightElement extends Components.ButtonCloseTopRight, HTMLStencilElement {
    }
    var HTMLButtonCloseTopRightElement: {
        prototype: HTMLButtonCloseTopRightElement;
        new (): HTMLButtonCloseTopRightElement;
    };
    interface HTMLButtonIconRoundElement extends Components.ButtonIconRound, HTMLStencilElement {
    }
    var HTMLButtonIconRoundElement: {
        prototype: HTMLButtonIconRoundElement;
        new (): HTMLButtonIconRoundElement;
    };
    interface HTMLEditableStringAttributeElement extends Components.EditableStringAttribute, HTMLStencilElement {
    }
    var HTMLEditableStringAttributeElement: {
        prototype: HTMLEditableStringAttributeElement;
        new (): HTMLEditableStringAttributeElement;
    };
    interface HTMLFacetecLivenessElement extends Components.FacetecLiveness, HTMLStencilElement {
    }
    var HTMLFacetecLivenessElement: {
        prototype: HTMLFacetecLivenessElement;
        new (): HTMLFacetecLivenessElement;
    };
    interface HTMLFacetecLivenessRetryLayerElement extends Components.FacetecLivenessRetryLayer, HTMLStencilElement {
    }
    var HTMLFacetecLivenessRetryLayerElement: {
        prototype: HTMLFacetecLivenessRetryLayerElement;
        new (): HTMLFacetecLivenessRetryLayerElement;
    };
    interface HTMLFlowManagerElement extends Components.FlowManager, HTMLStencilElement {
    }
    var HTMLFlowManagerElement: {
        prototype: HTMLFlowManagerElement;
        new (): HTMLFlowManagerElement;
    };
    interface HTMLFlowManagerProgressTrackerElement extends Components.FlowManagerProgressTracker, HTMLStencilElement {
    }
    var HTMLFlowManagerProgressTrackerElement: {
        prototype: HTMLFlowManagerProgressTrackerElement;
        new (): HTMLFlowManagerProgressTrackerElement;
    };
    interface HTMLIconFailCircleElement extends Components.IconFailCircle, HTMLStencilElement {
    }
    var HTMLIconFailCircleElement: {
        prototype: HTMLIconFailCircleElement;
        new (): HTMLIconFailCircleElement;
    };
    interface HTMLIconLoaderElement extends Components.IconLoader, HTMLStencilElement {
    }
    var HTMLIconLoaderElement: {
        prototype: HTMLIconLoaderElement;
        new (): HTMLIconLoaderElement;
    };
    interface HTMLIdvInBrowserElement extends Components.IdvInBrowser, HTMLStencilElement {
    }
    var HTMLIdvInBrowserElement: {
        prototype: HTMLIdvInBrowserElement;
        new (): HTMLIdvInBrowserElement;
    };
    interface HTMLProcessingLayerElement extends Components.ProcessingLayer, HTMLStencilElement {
    }
    var HTMLProcessingLayerElement: {
        prototype: HTMLProcessingLayerElement;
        new (): HTMLProcessingLayerElement;
    };
    interface HTMLStepDocscanElement extends Components.StepDocscan, HTMLStencilElement {
    }
    var HTMLStepDocscanElement: {
        prototype: HTMLStepDocscanElement;
        new (): HTMLStepDocscanElement;
    };
    interface HTMLStepLivenessElement extends Components.StepLiveness, HTMLStencilElement {
    }
    var HTMLStepLivenessElement: {
        prototype: HTMLStepLivenessElement;
        new (): HTMLStepLivenessElement;
    };
    interface HTMLElementTagNameMap {
        "blinkid-docscan": HTMLBlinkidDocscanElement;
        "blinkid-docscan-camera": HTMLBlinkidDocscanCameraElement;
        "blinkid-docscan-image": HTMLBlinkidDocscanImageElement;
        "blinkid-docscan-result-layer": HTMLBlinkidDocscanResultLayerElement;
        "button-close-top-right": HTMLButtonCloseTopRightElement;
        "button-icon-round": HTMLButtonIconRoundElement;
        "editable-string-attribute": HTMLEditableStringAttributeElement;
        "facetec-liveness": HTMLFacetecLivenessElement;
        "facetec-liveness-retry-layer": HTMLFacetecLivenessRetryLayerElement;
        "flow-manager": HTMLFlowManagerElement;
        "flow-manager-progress-tracker": HTMLFlowManagerProgressTrackerElement;
        "icon-fail-circle": HTMLIconFailCircleElement;
        "icon-loader": HTMLIconLoaderElement;
        "idv-in-browser": HTMLIdvInBrowserElement;
        "processing-layer": HTMLProcessingLayerElement;
        "step-docscan": HTMLStepDocscanElement;
        "step-liveness": HTMLStepLivenessElement;
    }
}
declare namespace LocalJSX {
    interface BlinkidDocscan {
        "config": BlinkIdDocScanConfig;
        "hasLobby"?: boolean;
    }
    interface BlinkidDocscanCamera {
        "config": BlinkIdDocScanCameraConfig;
    }
    interface BlinkidDocscanImage {
        "config"?: BlinkIdDocScanImageConfig;
    }
    interface BlinkidDocscanResultLayer {
        "config"?: BlinkIdDocScanResultLayerConfig;
    }
    interface ButtonCloseTopRight {
        "callbacks"?: ButtonCloseTopRightCallbacks;
        "isDisabled"?: boolean;
        "size"?: string;
    }
    interface ButtonIconRound {
        "callbacks"?: ButtonIconRoundCallbacks;
        "icon": ButtonIcon;
        "isDisabled"?: boolean;
        "marginBottom"?: string;
        "marginLeft"?: string;
        "marginRight"?: string;
        "marginTop"?: string;
        "size"?: number;
    }
    interface EditableStringAttribute {
        "config": EditableStringAttributeConfig;
        "value": string;
    }
    interface FacetecLiveness {
        "config": FaceLivenessConfig;
        "hasLobby"?: boolean;
    }
    interface FacetecLivenessRetryLayer {
        "errorCode"?: FaceTecConnectorResult;
        "onNo"?: (event: FacetecLivenessRetryLayerCustomEvent<any>) => void;
        "onYes"?: (event: FacetecLivenessRetryLayerCustomEvent<any>) => void;
        "show": boolean;
    }
    interface FlowManager {
        "callbacks": FlowManagerComponentCallbacks;
        "steps": IDVStepName[];
    }
    interface FlowManagerProgressTracker {
        "checkpoints": FmptCheckpoint[];
        "show": boolean;
    }
    interface IconFailCircle {
        "size"?: IconFailCircleSize;
    }
    interface IconLoader {
        "fontSize"?: string;
    }
    interface IdvInBrowser {
        "config"?: IdvInBrowserConfig;
        "onResult"?: (event: IdvInBrowserCustomEvent<IdvInBrowserResult>) => void;
        "onSession-initialized"?: (event: IdvInBrowserCustomEvent<string>) => void;
    }
    interface ProcessingLayer {
        "iconFontSize"?: string;
        "text"?: string;
    }
    interface StepDocscan {
        /**
          * Prop()  Mandatory configuration object.
         */
        "config": StepComponentConfig;
    }
    interface StepLiveness {
        /**
          * Prop()  Mandatory configuration object.
         */
        "config": StepComponentConfig;
    }
    interface IntrinsicElements {
        "blinkid-docscan": BlinkidDocscan;
        "blinkid-docscan-camera": BlinkidDocscanCamera;
        "blinkid-docscan-image": BlinkidDocscanImage;
        "blinkid-docscan-result-layer": BlinkidDocscanResultLayer;
        "button-close-top-right": ButtonCloseTopRight;
        "button-icon-round": ButtonIconRound;
        "editable-string-attribute": EditableStringAttribute;
        "facetec-liveness": FacetecLiveness;
        "facetec-liveness-retry-layer": FacetecLivenessRetryLayer;
        "flow-manager": FlowManager;
        "flow-manager-progress-tracker": FlowManagerProgressTracker;
        "icon-fail-circle": IconFailCircle;
        "icon-loader": IconLoader;
        "idv-in-browser": IdvInBrowser;
        "processing-layer": ProcessingLayer;
        "step-docscan": StepDocscan;
        "step-liveness": StepLiveness;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "blinkid-docscan": LocalJSX.BlinkidDocscan & JSXBase.HTMLAttributes<HTMLBlinkidDocscanElement>;
            "blinkid-docscan-camera": LocalJSX.BlinkidDocscanCamera & JSXBase.HTMLAttributes<HTMLBlinkidDocscanCameraElement>;
            "blinkid-docscan-image": LocalJSX.BlinkidDocscanImage & JSXBase.HTMLAttributes<HTMLBlinkidDocscanImageElement>;
            "blinkid-docscan-result-layer": LocalJSX.BlinkidDocscanResultLayer & JSXBase.HTMLAttributes<HTMLBlinkidDocscanResultLayerElement>;
            "button-close-top-right": LocalJSX.ButtonCloseTopRight & JSXBase.HTMLAttributes<HTMLButtonCloseTopRightElement>;
            "button-icon-round": LocalJSX.ButtonIconRound & JSXBase.HTMLAttributes<HTMLButtonIconRoundElement>;
            "editable-string-attribute": LocalJSX.EditableStringAttribute & JSXBase.HTMLAttributes<HTMLEditableStringAttributeElement>;
            "facetec-liveness": LocalJSX.FacetecLiveness & JSXBase.HTMLAttributes<HTMLFacetecLivenessElement>;
            "facetec-liveness-retry-layer": LocalJSX.FacetecLivenessRetryLayer & JSXBase.HTMLAttributes<HTMLFacetecLivenessRetryLayerElement>;
            "flow-manager": LocalJSX.FlowManager & JSXBase.HTMLAttributes<HTMLFlowManagerElement>;
            "flow-manager-progress-tracker": LocalJSX.FlowManagerProgressTracker & JSXBase.HTMLAttributes<HTMLFlowManagerProgressTrackerElement>;
            "icon-fail-circle": LocalJSX.IconFailCircle & JSXBase.HTMLAttributes<HTMLIconFailCircleElement>;
            "icon-loader": LocalJSX.IconLoader & JSXBase.HTMLAttributes<HTMLIconLoaderElement>;
            "idv-in-browser": LocalJSX.IdvInBrowser & JSXBase.HTMLAttributes<HTMLIdvInBrowserElement>;
            "processing-layer": LocalJSX.ProcessingLayer & JSXBase.HTMLAttributes<HTMLProcessingLayerElement>;
            "step-docscan": LocalJSX.StepDocscan & JSXBase.HTMLAttributes<HTMLStepDocscanElement>;
            "step-liveness": LocalJSX.StepLiveness & JSXBase.HTMLAttributes<HTMLStepLivenessElement>;
        }
    }
}
